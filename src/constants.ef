!!>
     author: Akira Kageyama
     date: 2023.05.05
   
     Fortran定数と数学定数
   
     @note 定数であることが目で見てわかりやすいように全ての文字を
           大文字で書いているがコンパイラには無意味。
     
     @note シミュレーション領域は直方体と仮定している。
           x方向の長さXMAX-XMINである。座標系の原点を
           シミュレーション領域の中心におくためには
           XMAXとXMIN絶対値を等しくとる。
     
     @note シミュレーションの（x方向の）空間解像度を上げる
           ためには同じXMAX-XMINに対して格子点数NXを上げれば良い。
     
     @note x,y,z それぞれの方向の空間解像度、
           つまり格子間隔dx,dy,dzが異なっていても構わないが、
           その差が極端に大きくしないほうがよい。
!!< 
module constants_m
  use iso_fortran_env
  implicit none

  logical <const> :: DEBUG_MODE = .true.

  ! << f90 constants >>
  integer <const> :: SI = int32     ! 単精度整数
  integer <const> :: DI = int64     ! 倍精度整数
  integer <const> :: SR = real32    ! 単精度実数
  integer <const> :: DR = real64    ! 倍精度実数

  ! << Mathematical constants >>
  real(DR) <const> :: PI = atan(1.0_DR)*4
  real(DR) <const> :: TWOPI = PI*2

  !<< Code utility constants >>!
  integer <const> :: NIL = -huge(1)

  !<< MPI process constants >>!
  integer <const> :: NPROC_X = 8 ! x方向MPIプロセス数 mkjob.sh でこの行をgrepする
  integer <const> :: NPROC_Y = 4 ! y方向MPIプロセス数 mkjob.sh でこの行をgrepする 
  integer <const> :: NPROC_Z = 4 ! z方向MPIプロセス数 mkjob.sh でこの行をgrepする

  !<< Grid size constants >>!
  integer <const> :: NXPP =  20   ! PP = Per Process 
  integer <const> :: NYPP =  20
  integer <const> :: NZPP =  20
  integer <const> :: NXPP1 = NXPP + 1  ! PP1 = PP plus one
  integer <const> :: NYPP1 = NYPP + 1
  integer <const> :: NZPP1 = NZPP + 1
  integer <const> :: NX_GLOBAL = NXPP * NPROC_X + 2 ! x方向の全格子点数
  integer <const> :: NY_GLOBAL = NYPP * NPROC_Y + 2
  integer <const> :: NZ_GLOBAL = NZPP * NPROC_Z + 2

  ! 格子サイズのメモ
  ! NX_GLOBAL = 162  ! Vis=1e-2, Therm=1e-2: 10000 steps OK. 9 min.
  ! NY_GLOBAL =  82  ! THE_FORCE 1e2 ==> vmax = 5 m/s
  ! NZ_GLOBAL =  82  ! longer force cylinder   128 MPI procs 

  ! << Box Size >>
  real(DR) <const> :: XMIN = -10.0_DR ! 計算領域範囲 +x  単位はメートル
  real(DR) <const> :: XMAX = +10.0_DR ! 計算領域範囲 -x
  real(DR) <const> :: YMIN =  -5.0_DR ! 計算領域範囲 +y
  real(DR) <const> :: YMAX =  +5.0_DR ! 計算領域範囲 -y
  real(DR) <const> :: ZMIN =  -5.0_DR ! 計算領域範囲 +z
  real(DR) <const> :: ZMAX =  +5.0_DR ! 計算領域範囲 -z
end module constants_m
